% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/base_zi.R
\name{qgcomp.zi.boot}
\alias{qgcomp.zi.boot}
\title{estimating the parameters of a marginal structural model (MSM) based on 
g-computation with quantized exposures}
\usage{
qgcomp.zi.boot(
  f,
  data,
  expnms = NULL,
  q = 4,
  breaks = NULL,
  id = NULL,
  alpha = 0.05,
  B = 200,
  degree = 1,
  seed = NULL,
  bayes = FALSE,
  parallel = FALSE,
  MCsize = 10000,
  msmcontrol = zimsm.fit.control(),
  ...
)
}
\arguments{
\item{f}{R style formula}

\item{data}{data frame}

\item{expnms}{character vector of exposures of interest}

\item{q}{NULL or number of quantiles used to create quantile indicator variables
representing the exposure variables. If NULL, then gcomp proceeds with un-transformed
version of exposures in the input datasets (useful if data are already transformed,
or for performing standard g-computation)}

\item{breaks}{(optional) NULL, or a list of (equal length) numeric vectors that 
characterize the minimum value of each category for which to 
break up the variables named in expnms. This is an alternative to using 'q'
to define cutpoints.}

\item{id}{(optional) NULL, or variable name indexing individual units of 
observation (only needed if analyzing data with multiple observations per 
id/cluster)}

\item{alpha}{alpha level for confidence limit calculation}

\item{B}{integer: number of bootstrap iterations (this should typically be
>=200, though it is set lower in examples to improve run-time).}

\item{degree}{polynomial basis function for marginal model (e.g. degree = 2
allows that the relationship between the whole exposure mixture and the outcome
is quadratic.}

\item{seed}{integer or NULL: random number seed for replicable bootstrap results}

\item{bayes}{not currently implemented.}

\item{parallel}{use (safe) parallel processing from the future and future.apply packages}

\item{MCsize}{integer: sample size for simulation to approximate marginal 
zero inflated model parameters. This can be left small for testing, but should be as large
as needed to reduce simulation error to an acceptable magnitude (can compare psi coefficients for 
linear fits with qgcomp.zi.noboot to gain some intuition for the level of expected simulation 
error at a given value of MCsize)}

\item{msmcontrol}{named list from \code{\link[qgcomp]{zimsm.fit.control}}}

\item{...}{arguments to glm (e.g. family)}

\item{rr}{logical: if using binary outcome and rr=TRUE, qgcomp.boot will 
estimate risk ratio rather than odds ratio}
}
\value{
a qgcompfit object, which contains information about the effect
 measure of interest (psi) and associated variance (var.psi), as well
 as information on the model fit (fit) and information on the 
 marginal structural model (msmfit) used to estimate the final effect
 estimates.
}
\description{
This function yields population average effect estimates for 
  both continuous and binary outcomes
}
\details{
Estimates correspond to the average expected change in the
 (log) outcome per quantile increase in the joint exposure to all exposures 
 in `expnms'. Test statistics and confidence intervals are based on 
 a non-parametric bootstrap, using the standard deviation of the bootstrap
 estimates to estimate the standard error. The bootstrap standard error is 
 then used to estimate Wald-type confidence intervals. Note that no bootstrapping
 is done on estimated quantiles of exposure, so these are treated as fixed
 quantities
}
\examples{
set.seed(50)
n=100
dat <- data.frame(y=rbinom(n, 1, 0.5)*rpois(n, 1.2), x1=runif(n), x2=runif(n), z=runif(n))
# poisson count model, mixture in both portions
\donttest{
res = qgcomp.zi.boot(f=y ~ x1 + x2 | x1 + x2, expnms = c('x1', 'x2'), 
    data=dat, q=2, dist="poisson", B=1000, MCsize=5000, parallel=TRUE)
qgcomp.zi.noboot(f=y ~ x1 + x2 | x1 + x2, expnms = c('x1', 'x2'), 
    data=dat, q=2, dist="poisson")
  # ...(truncated output)
  # Mixture log(OR/RR) (Delta method CI):
  # Prob(Y ~ count):
#               Estimate Std. Error   Lower CI  Upper CI Z value Pr(>|z|)
  # (Intercept)  0.27720    0.15033 -0.017445  0.57185  1.8439  0.06519
  # psi1        -0.06132    0.27058 -0.591644  0.46901 -0.2266  0.82072
  # Prob(Y ~ zero):
#               Estimate Std. Error   Lower CI  Upper CI Z value Pr(>|z|)
  # (Intercept) -0.037799   0.262648 -0.55258  0.47698 -0.1439   0.8856
  # psi1         0.448493   0.443598 -0.42094  1.31793  1.0110   0.3120
res
# Mixture log(OR/RR) (bootstrap CI):
# Prob(Y ~ count):
#               Estimate Std. Error   Lower CI  Upper CI Z value Pr(>|z|)
# (Intercept)  0.2757045  0.1456615 -0.0097867  0.56120  1.8928  0.05839
# psi1        -0.0072852  0.2577658 -0.5124969  0.49793 -0.0283  0.97745
# Prob(Y ~ zero):
#               Estimate Std. Error   Lower CI  Upper CI Z value Pr(>|z|)
# (Intercept) 0.017946   0.298588 -0.56728  0.60317  0.0601   0.9521
# psi1        0.480062   0.523181 -0.54535  1.50548  0.9176   0.3588

# accuracy for small MCsize is suspect (compare coefficients between boot/noboot versions), 
# so re-check with MCsize set to larger value (this takes a long time to run)
res2 = qgcomp.zi.boot(f=y ~ x1 + x2 | x1 + x2, expnms = c('x1', 'x2'), 
    data=dat, q=2, dist="poisson", B=1000, MCsize=50000, parallel=TRUE)
 res2
# Mixture log(OR/RR) (bootstrap CI):
#   
#   Prob(Y ~ count):
#              Estimate Std. Error   Lower CI Upper CI Z value Pr(>|z|)
# (Intercept)  0.278000   0.138389  0.0067627  0.54924  2.0088  0.04455
# psi1        -0.072634   0.246445 -0.5556581  0.41039 -0.2947  0.76820
#    Prob(Y ~ zero):
#              Estimate Std. Error   Lower CI Upper CI Z value Pr(>|z|)
# (Intercept) -0.03056    0.29277 -0.60438  0.54326 -0.1044   0.9169
# psi1         0.43745    0.50557 -0.55344  1.42834  0.8653   0.3869
 
 # better, but could possibly go even higher
plot(density(res2$bootsamps[4,]))

# negative binomial count model, mixture and covariate in both portions
qgcomp.zi.boot(f=y ~ z + x1 + x2 | z + x1 + x2, expnms = c('x1', 'x2'), 
   data=dat, q=2, dist="negbin", B=10, MCsize=10000) 
}
}
\seealso{
\code{\link[qgcomp]{qgcomp.noboot}}, and \code{\link[qgcomp]{qgcomp}}
}
\concept{variance mixtures}
